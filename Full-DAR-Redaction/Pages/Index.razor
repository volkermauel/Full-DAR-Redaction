@page "/"

@using System.IO
@using RedactionLibrary
@inject IJSRuntime JS
@inject IRedactWordFile RWF


<h3>Convert Draft Assessment Report Part I</h3>

@if (isLoading)
{
    <div class="progress my-2">
        <div class="progress-bar" role="progressbar" style="width:@uploadProgress%" aria-valuenow="@uploadProgress" aria-valuemin="0" aria-valuemax="100">@($"{uploadProgress}%")</div>
    </div>
}

Please select each part of the DAR files. Convert the quality part individually below! <br />
For a substantial modification please upload also the introduction and the conclusion, too. 
These parts will be redacted and then joined together in a Word file.
The Word file will have removed the fields "Author" and "Last modified by".
Because of the difficulties about embedded graphics or individual fonts you have to save the redacted Word file as PDF on your own. 

<table class="table table-striped w-auto">
    <thead>
        <tr>
            <th>File Type</th>
            <th>Select docx template</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Part I Section 1 Introduction – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_1"/></td>
        </tr>
@*        <tr>
            <td>Part I Section 2 Quality Assessment – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_2" /></td>
        </tr>*@
                <tr>
            <td>Part I Section 3 Pre clinical Assessment – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_3" /></td>
        </tr>        <tr>
            <td>Part I Section 4 Clinical Assessment – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_4" /></td>
        </tr>        <tr>
            <td>Part I Section 5 Statistical Methodological Assessment – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_5" /></td>
        </tr>        <tr>
            <td>Part I Section 6 Regulatory Assessment – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_6" /></td>
        </tr>        <tr>
            <td>Part I Section 7 Conclusion – Draft</td>
            <td><InputFile OnChange="@LoadFiles_I_7" /></td>
        </tr>
    </tbody>
</table>
<br />
<p>@((MarkupString)myName1)</p>
<button class="btn btn-primary" @onclick="convertWOq">Redact DAR part I without Quality</button>
@*<button class="btn btn-primary" @onclick="convertQ">Redact DAR part I Quality</button>*@
<p>&nbsp;<br/></p>


<h3>Convert Draft Assessment Reports Parts individually</h3>
Please select an individual DAR part for uploading and redaction (e.g. the quality part):
<table class="table table-striped w-auto">
    <thead>
        <tr>
            <th>File Type</th>
            <th>Select docx template</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>One individual part</td>
            <td><InputFile OnChange="@LoadFiles_II"/></td>
        </tr>
    </tbody>
</table>
<br />
<p>@((MarkupString)myName2)</p>
<button class="btn btn-primary" @onclick="convertII">Redact DAR part individually</button>



@code {
    private string myName1 { get; set; } = "<p></p>";
    private string myName2 { get; set; } = "<p></p>";
    private byte[] ar_I_1 { get; set; } = default!;
    private byte[] ar_I_2 { get; set; } = default!;
    private byte[] ar_I_3 { get; set; } = default!;
    private byte[] ar_I_4 { get; set; } = default!;
    private byte[] ar_I_5 { get; set; } = default!;
    private byte[] ar_I_6 { get; set; } = default!;
    private byte[] ar_I_7 { get; set; } = default!;
    private byte[] ar_II { get; set; } = default!;
    // Or we can declare the type as nullable:
    // private byte[]? ar_I_8 { get; set; }


    private bool isLoading;
    private int uploadProgress;

    private async Task LoadFiles_I_1(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        //var file = e.File;
        //var memoryStream = new MemoryStream();
        //await file.OpenReadStream().CopyToAsync(memoryStream);
        //ar_I_1 = memoryStream.ToArray();
        ar_I_1 = await loading(e);
        isLoading = false;
    }



    private async Task LoadFiles_I_2(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_I_2 = await loading(e);
        isLoading = false;
    }
    private async Task LoadFiles_I_3(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_I_3 = await loading(e);
        isLoading = false;
    }
    private async Task LoadFiles_I_4(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_I_4 = await loading(e);
        isLoading = false;

    }
    private async Task  LoadFiles_I_5(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_I_5 = await loading(e);
        isLoading = false;
    }
    private async Task  LoadFiles_I_6(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_I_6 = await loading(e);
        isLoading = false;
    }
    private async Task LoadFiles_I_7(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_I_7 = await loading(e);
        isLoading = false;
    }
    private async Task LoadFiles_II(InputFileChangeEventArgs e)
    {
        isLoading = true;
        uploadProgress = 0;
        ar_II = await loading(e);
        isLoading = false;
    }

    private async Task<byte[]> loading(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[81920];
        var memoryStream = new MemoryStream();
        await using var stream = file.OpenReadStream(maxAllowedSize: 41943040);
        long totalRead = 0;
        int read;
        while ((read = await stream.ReadAsync(buffer)) > 0)
        {
            await memoryStream.WriteAsync(buffer.AsMemory(0, read));
            totalRead += read;
            uploadProgress = (int)(100 * totalRead / file.Size);
            await InvokeAsync(StateHasChanged);
        }
        uploadProgress = 100;
        await InvokeAsync(StateHasChanged);
        return memoryStream.ToArray();
    }


    private async Task convertWOq()
    {
        byte[]? arI1;
        byte[]? arI2;
        byte[]? arI3;
        byte[]? arI4;
        byte[]? arI5;
        byte[]? arI6;
        byte[]? arI7;
        try
        {
            arI1 = RWF.Redact(ar_I_1);
            arI3 = RWF.Redact(ar_I_3);
            arI4 = RWF.Redact(ar_I_4);
            arI5 = RWF.Redact(ar_I_5);
            arI6 = RWF.Redact(ar_I_6);
            arI7 = RWF.Redact(ar_I_7);
        }
        catch
        {
            myName1 = @"<p class=""haraldDotted""><b>Please upload only Microsoft Word files in format docx.</b></p>";
            return;
        }
        var export = RWF.JoinWithoutQuality(arI1, arI3, arI4, arI5, arI6, arI7);
        if (export == null)
        {
            myName1 = @"<p class=""haraldDotted""><b>No parts uploaded for redaction. Please upload at least one DAR part.</b></p>";
            return;
        }
        var fileStream = new MemoryStream(export);
        var fileName = "FAR Part I without quality.docx";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        myName1 = @"<p class=""haraldDottedGreen""><b>The above documents are redacted and joined together in one Word file. If you have enabled automatic saving to a selected location, please check your downloads.</b></p>";
        await JS.InvokeVoidAsync("downloadFileFromStream",fileName,streamRef);
    }

    private async Task convertII()
    {
        if(ar_II == null)
        {
            myName2 = @"<p class=""haraldDotted""><b>Please upload a DAR part for redaction.</b></p>";
            return;
        }
        myName2 = @"<p class=""haraldDottedGreen""><b>The above document is redacted to a new Word file. If you have enabled automatic saving to a selected location, please check your downloads.</b></p>";

        byte[]? arII = null;

        try
        {
            arII = RWF.Redact(ar_II);
        }
        catch
        {
            myName2 = @"<p class=""haraldDotted""><b>Please upload only Microsoft Word files in format docx.</b></p>";
            return;            
        }

        var fileStream = new MemoryStream(arII);
        var fileName = "FAR Part redacted.docx";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream",fileName,streamRef);
    }

    private async Task convertQ()
    {
        myName2 = "Part I Quality redacted";
        var arII = RWF.Redact(ar_I_2);
        var fileStream = new MemoryStream(arII);
        var fileName = "FAR Part I Quality redacted.docx";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream",fileName,streamRef);
    }


}
